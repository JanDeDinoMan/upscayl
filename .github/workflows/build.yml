name: CI

on: [push]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/cache@v2
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      # - name: Prepare NSIS
      #   if: matrix.os == 'windows-latest'
      #   id: prep_nsis
      #   uses: joncloud/makensis-action@v1
      #   with:
      #     just-include: true

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      
      - name: set version
        run: |
          echo "VERSION=$(npm pkg get version | tr -d '\"')" >> $GITHUB_ENV
      - name: yarn version
        run: |
          yarn version
      - name: node version
        run: |
          node --version
      # - name: Build App [macOS]
      #   if: matrix.os == 'macOS-latest'
      #   run: |
      #     yarn
      #     npm install
      #     yarn gulp dist
      - name: Build App [ubuntu]

        if: matrix.os == 'ubuntu-latest'
        run: |
          npm install
          npm run dist:zip
      # - name: Build App [windows]
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     yarn
      #     npm install
      #     yarn gulp dist --platforms=win32
      #     yarn gulp dist --platforms=win64
      #   env:
      #     NSIS_PATH: ${{ steps.prep_nsis.outputs.nsis-path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: dist/upscayl-${{env.VERSION}}.zip

  release:
    needs: build
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Context
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
    
      - name: Get the version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
      
      - uses: actions/download-artifact@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: ubuntu-latest
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset [ubuntu-zip-x64]
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-latest/upscayl-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: Upscayl-${{ steps.get_version.outputs.VERSION }}-linux64.zip
          asset_content_type: application/octet-stream